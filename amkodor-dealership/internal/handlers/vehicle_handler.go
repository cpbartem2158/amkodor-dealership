package handlers

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"sync"
	"time"

	"github.com/gorilla/mux"

	"amkodor-dealership/internal/models"
	"amkodor-dealership/internal/service"
	"amkodor-dealership/internal/utils"
)

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
var (
	vehiclesStore = make(map[int]models.CreateVehicleRequest)
	vehiclesMutex sync.RWMutex
	nextVehicleID = 1
)

type VehicleHandler struct {
	service *service.VehicleService
}

func NewVehicleHandler(service *service.VehicleService) *VehicleHandler {
	return &VehicleHandler{
		service: service,
	}
}

// GetAll –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
func (h *VehicleHandler) GetAll(w http.ResponseWriter, r *http.Request) {
	log.Println("GetAll: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

	// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	baseVehicles := []map[string]interface{}{
		{
			"id":       1,
			"name":     "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ê–ú–ö–û–î–û–† 3316",
			"category": "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã",
			"price":    150000,
			"status":   "–í –Ω–∞–ª–∏—á–∏–∏",
			"year":     2025,
			"engine":   "–î–∏–∑–µ–ª—å",
			"power":    "160 –ª.—Å.",
			"weight":   "16 —Ç",
			"image":    "üöú",
		},
		{
			"id":       2,
			"name":     "–ë—É–ª—å–¥–æ–∑–µ—Ä –ê–ú–ö–û–î–û–† 3317",
			"category": "–ë—É–ª—å–¥–æ–∑–µ—Ä—ã",
			"price":    200000,
			"status":   "–í –Ω–∞–ª–∏—á–∏–∏",
			"year":     2025,
			"engine":   "–î–∏–∑–µ–ª—å",
			"power":    "180 –ª.—Å.",
			"weight":   "17 —Ç",
			"image":    "üöú",
		},
		{
			"id":       3,
			"name":     "–ü–æ–≥—Ä—É–∑—á–∏–∫ –ê–ú–ö–û–î–û–† 3318",
			"category": "–ü–æ–≥—Ä—É–∑—á–∏–∫–∏",
			"price":    120000,
			"status":   "–í –Ω–∞–ª–∏—á–∏–∏",
			"year":     2025,
			"engine":   "–î–∏–∑–µ–ª—å",
			"power":    "140 –ª.—Å.",
			"weight":   "14 —Ç",
			"image":    "üöú",
		},
		{
			"id":       4,
			"name":     "–ö—Ä–∞–Ω –ê–ú–ö–û–î–û–† 3319",
			"category": "–ö—Ä–∞–Ω—ã",
			"price":    300000,
			"status":   "–í –Ω–∞–ª–∏—á–∏–∏",
			"year":     2025,
			"engine":   "–î–∏–∑–µ–ª—å",
			"power":    "200 –ª.—Å.",
			"weight":   "25 —Ç",
			"image":    "üöú",
		},
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω–æ–º —Ç–µ—Ö–Ω–∏–∫—É
	vehiclesMutex.RLock()
	addedVehicles := make([]map[string]interface{}, 0, len(vehiclesStore))
	for id, vehicle := range vehiclesStore {
		addedVehicles = append(addedVehicles, map[string]interface{}{
			"id":       id,
			"name":     vehicle.Name,
			"category": vehicle.Category,
			"price":    vehicle.Price,
			"status":   vehicle.Status,
			"year":     vehicle.Year,
			"engine":   vehicle.Engine,
			"power":    vehicle.Power,
			"weight":   vehicle.Weight,
			"image":    vehicle.Image,
		})
	}
	vehiclesMutex.RUnlock()

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	allVehicles := append(baseVehicles, addedVehicles...)

	log.Printf("GetAll: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º %d –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (%d –±–∞–∑–æ–≤—ã—Ö + %d –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö)",
		len(allVehicles), len(baseVehicles), len(addedVehicles))

	utils.RespondSuccess(w, allVehicles)
}

// GetByID –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
func (h *VehicleHandler) GetByID(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
		return
	}

	vehicle, err := h.service.GetByID(id)
	if err != nil {
		utils.ErrorResponse(w, http.StatusNotFound, "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	utils.SuccessResponse(w, http.StatusOK, vehicle)
}

// Create —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
func (h *VehicleHandler) Create(w http.ResponseWriter, r *http.Request) {
	log.Println("Create: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏")

	var req models.CreateVehicleRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondError(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return
	}

	log.Printf("Create: –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: %+v", req)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	vehiclesMutex.Lock()
	id := nextVehicleID
	nextVehicleID++
	vehiclesStore[id] = req
	vehiclesMutex.Unlock()

	log.Printf("Create: —Ç–µ—Ö–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID %d", id)

	utils.RespondSuccess(w, map[string]interface{}{
		"id":      id,
		"message": "–¢–µ—Ö–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
		"data":    req,
	})
}

// Update –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
func (h *VehicleHandler) Update(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
		return
	}

	var vehicle models.Vehicle
	if err := json.NewDecoder(r.Body).Decode(&vehicle); err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return
	}

	vehicle.VehicleID = id

	if err := utils.ValidateStruct(&vehicle); err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
		return
	}

	if err := h.service.Update(&vehicle); err != nil {
		utils.ErrorResponse(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
		return
	}

	utils.SuccessResponse(w, http.StatusOK, map[string]string{
		"message": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
	})
}

// Delete —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
func (h *VehicleHandler) Delete(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		utils.ErrorResponse(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
		return
	}

	if err := h.service.Delete(id); err != nil {
		utils.ErrorResponse(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
		return
	}

	utils.SuccessResponse(w, http.StatusOK, map[string]string{
		"message": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω",
	})
}

// Search –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
func (h *VehicleHandler) Search(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()

	filters := models.VehicleFilters{
		Model:     query.Get("model"),
		YearFrom:  parseIntParam(query.Get("year_from")),
		YearTo:    parseIntParam(query.Get("year_to")),
		PriceFrom: parseFloatParam(query.Get("price_from")),
		PriceTo:   parseFloatParam(query.Get("price_to")),
		Status:    query.Get("status"),
		Color:     query.Get("color"),
	}

	vehicles, err := h.service.Search(map[string]interface{}{
		"model":      filters.Model,
		"year_from":  filters.YearFrom,
		"year_to":    filters.YearTo,
		"price_from": filters.PriceFrom,
		"price_to":   filters.PriceTo,
		"status":     filters.Status,
		"color":      filters.Color,
	})
	if err != nil {
		utils.ErrorResponse(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
		return
	}

	utils.SuccessResponse(w, http.StatusOK, vehicles)
}

// GetCategories –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
func (h *VehicleHandler) GetCategories(w http.ResponseWriter, r *http.Request) {
	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è GetCategories
	categories := []string{"–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã", "–ë—É–ª—å–¥–æ–∑–µ—Ä—ã", "–ü–æ–≥—Ä—É–∑—á–∏–∫–∏", "–¢—Ä–∞–∫—Ç–æ—Ä—ã"}

	utils.SuccessResponse(w, http.StatusOK, categories)
}

// Helper —Ñ—É–Ω–∫—Ü–∏–∏
func parseIntParam(param string) *int {
	if param == "" {
		return nil
	}
	val, err := strconv.Atoi(param)
	if err != nil {
		return nil
	}
	return &val
}

func parseFloatParam(param string) *float64 {
	if param == "" {
		return nil
	}
	val, err := strconv.ParseFloat(param, 64)
	if err != nil {
		return nil
	}
	return &val
}

// UploadImage –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (h *VehicleHandler) UploadImage(w http.ResponseWriter, r *http.Request) {
	log.Println("UploadImage: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

	// –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
	if r.Method == "OPTIONS" {
		w.WriteHeader(http.StatusOK)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
	if r.Method != http.MethodPost {
		utils.RespondError(w, http.StatusMethodNotAllowed, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
		return
	}

	// –ü–∞—Ä—Å–∏–º multipart form
	err := r.ParseMultipartForm(10 << 20) // 10 MB
	if err != nil {
		log.Printf("UploadImage: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã: %v", err)
		utils.RespondError(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
	file, handler, err := r.FormFile("image")
	if err != nil {
		log.Printf("UploadImage: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
		utils.RespondError(w, http.StatusBadRequest, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	defer file.Close()

	log.Printf("UploadImage: –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª %s, —Ä–∞–∑–º–µ—Ä %d –±–∞–π—Ç", handler.Filename, handler.Size)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
	contentType := handler.Header.Get("Content-Type")
	if len(contentType) < 5 || contentType[:5] != "image" {
		utils.RespondError(w, http.StatusBadRequest, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
		return
	}

	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	ext := filepath.Ext(handler.Filename)
	filename := fmt.Sprintf("%d%s", time.Now().UnixNano(), ext)

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	uploadDir := "web/static/uploads"
	if err := os.MkdirAll(uploadDir, 0755); err != nil {
		utils.RespondError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: "+err.Error())
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
	filepath := filepath.Join(uploadDir, filename)
	dst, err := os.Create(filepath)
	if err != nil {
		utils.RespondError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
		return
	}
	defer dst.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	_, err = io.Copy(dst, file)
	if err != nil {
		utils.RespondError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	imageURL := fmt.Sprintf("/static/uploads/%s", filename)
	utils.RespondSuccess(w, map[string]string{
		"url":      imageURL,
		"filename": filename,
	})
}
