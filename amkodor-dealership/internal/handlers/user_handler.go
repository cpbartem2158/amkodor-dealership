package handlers

import (
	"encoding/json"
	"net/http"
	"sync"
	"time"

	"amkodor-dealership/internal/utils"
)

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
var (
	serviceRequestsStore = make(map[int]map[string]interface{})
	serviceRequestsMutex sync.RWMutex
	nextServiceRequestID = 1
)

type UserHandler struct {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
}

func NewUserHandler() *UserHandler {
	return &UserHandler{}
}

// GetUserStats –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) GetUserStats(w http.ResponseWriter, r *http.Request) {
	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	stats := map[string]interface{}{
		"totalOrders":   3,
		"favoriteItems": 5,
		"serviceVisits": 2,
		"totalSpent":    450000,
	}

	utils.RespondSuccess(w, stats)
}

// GetUserOrders –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) GetUserOrders(w http.ResponseWriter, r *http.Request) {
	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	orders := []map[string]interface{}{
		{
			"id":     1,
			"number": "ORD-2024-001",
			"date":   "2024-01-15",
			"status": "processing",
			"items": []map[string]interface{}{
				{
					"name":  "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ê–ú–ö–û–î–û–† 3316",
					"specs": "2023 –≥–æ–¥, –î–∏–∑–µ–ª—å, 160 –ª.—Å.",
					"price": 150000,
					"image": "üöú",
				},
			},
			"total": 150000,
		},
		{
			"id":     2,
			"number": "ORD-2024-002",
			"date":   "2024-01-10",
			"status": "delivered",
			"items": []map[string]interface{}{
				{
					"name":  "–ë—É–ª—å–¥–æ–∑–µ—Ä –ê–ú–ö–û–î–û–† 3317",
					"specs": "2023 –≥–æ–¥, –î–∏–∑–µ–ª—å, 180 –ª.—Å.",
					"price": 200000,
					"image": "üöú",
				},
			},
			"total": 200000,
		},
	}

	utils.RespondSuccess(w, orders)
}

// GetUserFavorites –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) GetUserFavorites(w http.ResponseWriter, r *http.Request) {
	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	favorites := []map[string]interface{}{
		{
			"id":       1,
			"name":     "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ê–ú–ö–û–î–û–† 3316",
			"category": "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã",
			"price":    150000,
			"year":     2025,
			"engine":   "–î–∏–∑–µ–ª—å",
			"power":    "160 –ª.—Å.",
			"weight":   "16 —Ç",
			"image":    "üöú",
		},
		{
			"id":       2,
			"name":     "–ë—É–ª—å–¥–æ–∑–µ—Ä –ê–ú–ö–û–î–û–† 3317",
			"category": "–ë—É–ª—å–¥–æ–∑–µ—Ä—ã",
			"price":    200000,
			"year":     2025,
			"engine":   "–î–∏–∑–µ–ª—å",
			"power":    "180 –ª.—Å.",
			"weight":   "17 —Ç",
			"image":    "üöú",
		},
	}

	utils.RespondSuccess(w, favorites)
}

// AddToFavorites –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
func (h *UserHandler) AddToFavorites(w http.ResponseWriter, r *http.Request) {
	var req struct {
		VehicleID int `json:"vehicle_id"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondError(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return
	}

	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	utils.RespondSuccess(w, map[string]string{
		"message": "–¢–µ—Ö–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
	})
}

// RemoveFromFavorites —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
func (h *UserHandler) RemoveFromFavorites(w http.ResponseWriter, r *http.Request) {
	vehicleID := r.URL.Query().Get("vehicle_id")
	if vehicleID == "" {
		utils.RespondError(w, http.StatusBadRequest, "ID —Ç–µ—Ö–Ω–∏–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
		return
	}

	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	utils.RespondSuccess(w, map[string]string{
		"message": "–¢–µ—Ö–Ω–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
	})
}

// GetServiceRequests –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ—Ä–≤–∏—Å
func (h *UserHandler) GetServiceRequests(w http.ResponseWriter, r *http.Request) {
	// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	baseRequests := []map[string]interface{}{
		{
			"id":          1,
			"title":       "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞",
			"description": "–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞ –ê–ú–ö–û–î–û–† 3316",
			"date":        "2025-01-15",
			"status":      "pending",
		},
		{
			"id":          2,
			"title":       "–†–µ–º–æ–Ω—Ç –≥–∏–¥—Ä–∞–≤–ª–∏–∫–∏",
			"description": "–ó–∞–º–µ–Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä–∞ –ø–æ–¥—ä–µ–º–∞ —Å—Ç—Ä–µ–ª—ã",
			"date":        "2025-01-10",
			"status":      "in-progress",
		},
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞—è–≤–∫–∏
	serviceRequestsMutex.RLock()
	userRequests := make([]map[string]interface{}, 0, len(serviceRequestsStore))
	for _, request := range serviceRequestsStore {
		userRequests = append(userRequests, request)
	}
	serviceRequestsMutex.RUnlock()

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞—è–≤–∫–∏
	allRequests := append(baseRequests, userRequests...)

	utils.RespondSuccess(w, allRequests)
}

// CreateServiceRequest —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å
func (h *UserHandler) CreateServiceRequest(w http.ResponseWriter, r *http.Request) {
	var req struct {
		Title       string `json:"title"`
		Description string `json:"description"`
		ServiceType string `json:"service_type"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondError(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	serviceRequestsMutex.Lock()
	id := nextServiceRequestID
	nextServiceRequestID++

	serviceRequestsStore[id] = map[string]interface{}{
		"id":           id,
		"title":        req.Title,
		"description":  req.Description,
		"service_type": req.ServiceType,
		"date":         time.Now().Format("2006-01-02"),
		"status":       "pending",
	}
	serviceRequestsMutex.Unlock()

	utils.RespondSuccess(w, map[string]interface{}{
		"id":      id,
		"message": "–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∞",
	})
}

// GetAllServiceRequests –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
func (h *UserHandler) GetAllServiceRequests(w http.ResponseWriter, r *http.Request) {
	// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	baseRequests := []map[string]interface{}{
		{
			"id":          1,
			"title":       "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞",
			"description": "–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞ –ê–ú–ö–û–î–û–† 3316",
			"date":        "2025-01-15",
			"status":      "pending",
			"customer":    "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
			"phone":       "+375 29 123-45-67",
		},
		{
			"id":          2,
			"title":       "–†–µ–º–æ–Ω—Ç –≥–∏–¥—Ä–∞–≤–ª–∏–∫–∏",
			"description": "–ó–∞–º–µ–Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä–∞ –ø–æ–¥—ä–µ–º–∞ —Å—Ç—Ä–µ–ª—ã",
			"date":        "2025-01-10",
			"status":      "in-progress",
			"customer":    "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤",
			"phone":       "+375 29 234-56-78",
		},
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞—è–≤–∫–∏
	serviceRequestsMutex.RLock()
	userRequests := make([]map[string]interface{}, 0, len(serviceRequestsStore))
	for _, request := range serviceRequestsStore {
		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
		adminRequest := make(map[string]interface{})
		for k, v := range request {
			adminRequest[k] = v
		}
		adminRequest["customer"] = "–ö–ª–∏–µ–Ω—Ç"
		adminRequest["phone"] = "–ù–µ —É–∫–∞–∑–∞–Ω"
		userRequests = append(userRequests, adminRequest)
	}
	serviceRequestsMutex.RUnlock()

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞—è–≤–∫–∏
	allRequests := append(baseRequests, userRequests...)

	utils.RespondSuccess(w, allRequests)
}

// GetUserProfile –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	profile := map[string]interface{}{
		"id":        1,
		"name":      "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
		"email":     "ivan@example.com",
		"phone":     "+375 29 123-45-67",
		"company":   "–û–û–û –°—Ç—Ä–æ–π—Ç–µ—Ö–Ω–∏–∫–∞",
		"createdAt": "2024-01-01",
	}

	utils.RespondSuccess(w, profile)
}

// UpdateUserProfile –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *UserHandler) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {
	var req map[string]interface{}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondError(w, http.StatusBadRequest, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		return
	}

	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	utils.RespondSuccess(w, map[string]string{
		"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
	})
}
