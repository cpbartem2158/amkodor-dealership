version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: amkodor_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: amkodor_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./internal/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - amkodor_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: amkodor_app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: amkodor_db
      DB_SSLMODE: disable
      SERVER_PORT: 8080
      JWT_SECRET: amkodor-secret-key-change-in-production
      JWT_EXPIRE_HOURS: 24
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./web:/app/web
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
    networks:
      - amkodor_network

  # PgAdmin (опционально, для управления БД)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: amkodor_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@amkodor.by
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - amkodor_network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  amkodor_network:
    driver: bridge