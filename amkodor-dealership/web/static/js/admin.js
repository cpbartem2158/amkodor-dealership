// –ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏

const Admin = {
    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async getStats() {
        try {
            const response = await API.get('/dashboard/stats');
            return response;
        } catch (error) {
            console.error('Error getting stats:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    async getRecentSales(limit = 10) {
        try {
            const response = await API.get(`/dashboard/recent-sales?limit=${limit}`);
            return response;
        } catch (error) {
            console.error('Error getting recent sales:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    async getTopEmployees(limit = 5) {
        try {
            const response = await API.get(`/dashboard/top-employees?limit=${limit}`);
            return response;
        } catch (error) {
            console.error('Error getting top employees:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã
    async getWarehouses() {
        try {
            const response = await API.get('/admin/warehouses');
            return response;
        } catch (error) {
            console.error('Error getting warehouses:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –ø–æ ID
    async getWarehouse(id) {
        try {
            const response = await API.get(`/admin/warehouses/${id}`);
            return response;
        } catch (error) {
            console.error('Error getting warehouse:', error);
            throw error;
        }
    },

    // –°–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥
    async createWarehouse(data) {
        try {
            const response = await API.post('/admin/warehouses', data);
            return response;
        } catch (error) {
            console.error('Error creating warehouse:', error);
            throw error;
        }
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥
    async updateWarehouse(id, data) {
        try {
            const response = await API.put(`/admin/warehouses/${id}`, data);
            return response;
        } catch (error) {
            console.error('Error updating warehouse:', error);
            throw error;
        }
    },

    // –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥
    async deleteWarehouse(id) {
        try {
            const response = await API.delete(`/admin/warehouses/${id}`);
            return response;
        } catch (error) {
            console.error('Error deleting warehouse:', error);
            throw error;
        }
    }
};

// UI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
const AdminUI = {
    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
    displayStats(stats) {
        const statsContainer = document.getElementById('statsContainer');
        if (!statsContainer) return;

        const statsHTML = `
            <div class="stat-card">
                <div class="stat-icon">üöó</div>
                <div class="stat-content">
                    <h3>–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏</h3>
                    <p class="stat-value">${stats.available_vehicles || 0}</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">üë•</div>
                <div class="stat-content">
                    <h3>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
                    <p class="stat-value">${stats.total_customers || 0}</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">üí∞</div>
                <div class="stat-content">
                    <h3>–ü—Ä–æ–¥–∞–∂ –∑–∞ –º–µ—Å—è—Ü</h3>
                    <p class="stat-value">${stats.sales_last_month || 0}</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">üìä</div>
                <div class="stat-content">
                    <h3>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</h3>
                    <p class="stat-value">${window.app.formatCurrency(stats.total_revenue || 0)}</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">üëî</div>
                <div class="stat-content">
                    <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h3>
                    <p class="stat-value">${stats.total_employees || 0}</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">‚úÖ</div>
                <div class="stat-content">
                    <h3>–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂</h3>
                    <p class="stat-value">${stats.total_sales || 0}</p>
                </div>
            </div>
        `;

        statsContainer.innerHTML = statsHTML;
    },

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    displayRecentSales(sales) {
        const container = document.getElementById('recentSalesContainer');
        if (!container) return;

        if (!sales || sales.length === 0) {
            container.innerHTML = '<div class="no-results">–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂</div>';
            return;
        }

        const tableHTML = `
            <table class="table">
                <thead>
                    <tr>
                        <th>–î–∞—Ç–∞</th>
                        <th>–ê–≤—Ç–æ–º–æ–±–∏–ª—å</th>
                        <th>–ö–ª–∏–µ–Ω—Ç</th>
                        <th>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th>
                        <th>–°—É–º–º–∞</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                </thead>
                <tbody>
                    ${sales.map(sale => `
                        <tr>
                            <td>${window.app.formatDate(sale.sale_date)}</td>
                            <td>${sale.model}</td>
                            <td>${sale.customer_name}</td>
                            <td>${sale.employee_name}</td>
                            <td>${window.app.formatCurrency(sale.final_price)}</td>
                            <td>
                                <span class="badge badge-${this.getStatusClass(sale.status)}">
                                    ${this.getStatusText(sale.status)}
                                </span>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;

        container.innerHTML = tableHTML;
    },

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    displayTopEmployees(employees) {
        const container = document.getElementById('topEmployeesContainer');
        if (!container) return;

        if (!employees || employees.length === 0) {
            container.innerHTML = '<div class="no-results">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }

        const listHTML = `
            <div class="top-employees-list">
                ${employees.map((emp, index) => `
                    <div class="employee-item">
                        <div class="employee-rank">${index + 1}</div>
                        <div class="employee-info">
                            <h4>${emp.full_name}</h4>
                            <p>${emp.position}</p>
                        </div>
                        <div class="employee-stats">
                            <p class="sales-count">${emp.sales_count} –ø—Ä–æ–¥–∞–∂</p>
                            <p class="revenue">${window.app.formatCurrency(emp.total_revenue)}</p>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;

        container.innerHTML = listHTML;
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    getStatusText(status) {
        const statuses = {
            'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
        };
        return statuses[status] || status;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    getStatusClass(status) {
        const classes = {
            'pending': 'warning',
            'completed': 'success',
            'cancelled': 'danger'
        };
        return classes[status] || 'primary';
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
    async initDashboard() {
        try {
            window.app.showLoading();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await Admin.getStats();
            this.displayStats(stats);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
            const recentSales = await Admin.getRecentSales(10);
            this.displayRecentSales(recentSales);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            const topEmployees = await Admin.getTopEmployees(5);
            this.displayTopEmployees(topEmployees);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if (typeof ChartsUI !== 'undefined') {
                ChartsUI.initSalesChart();
                ChartsUI.initVehicleStatusChart();
                ChartsUI.initEmployeeSalesChart();
            }

        } catch (error) {
            window.app.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞', 'error');
        } finally {
            window.app.hideLoading();
        }
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥
    async refreshDashboard() {
        await this.initDashboard();
        window.app.showNotification('–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
    }
};

// Sidebar navigation
const Sidebar = {
    init() {
        const sidebarLinks = document.querySelectorAll('.sidebar-menu a');
        const currentPath = window.location.pathname;

        sidebarLinks.forEach(link => {
            if (link.getAttribute('href') === currentPath) {
                link.classList.add('active');
            }

            link.addEventListener('click', function(e) {
                sidebarLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.querySelector('.sidebar');

        if (menuToggle && sidebar) {
            menuToggle.addEventListener('click', () => {
                sidebar.classList.toggle('active');
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Å–∞–π–¥–±–∞—Ä–∞
            document.addEventListener('click', (e) => {
                if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
                    sidebar.classList.remove('active');
                }
            });
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!Auth.isAuthenticated()) {
        window.location.href = '/login';
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–π–¥–±–∞—Ä–∞
    Sidebar.init();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞—à–±–æ—Ä–¥–∞
    if (window.location.pathname === '/admin/dashboard') {
        AdminUI.initDashboard();

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = document.getElementById('refreshDashboard');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                AdminUI.refreshDashboard();
            });
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            AdminUI.refreshDashboard();
        }, 5 * 60 * 1000);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    if (window.location.pathname === '/admin/vehicles') {
        if (typeof VehiclesUI !== 'undefined') {
            VehiclesUI.loadVehiclesList();
        }

        const addVehicleBtn = document.getElementById('addVehicleBtn');
        if (addVehicleBtn) {
            addVehicleBtn.addEventListener('click', () => {
                VehiclesUI.openVehicleForm();
            });
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–∂
    if (window.location.pathname === '/admin/sales') {
        if (typeof SalesUI !== 'undefined') {
            SalesUI.loadSalesList();
        }

        const addSaleBtn = document.getElementById('addSaleBtn');
        if (addSaleBtn) {
            addSaleBtn.addEventListener('click', () => {
                SalesUI.openSaleForm();
            });
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (window.location.pathname === '/admin/customers') {
        if (typeof CustomersUI !== 'undefined') {
            CustomersUI.loadCustomersList();
        }

        const addCustomerBtn = document.getElementById('addCustomerBtn');
        if (addCustomerBtn) {
            addCustomerBtn.addEventListener('click', () => {
                CustomersUI.openCustomerForm();
            });
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á—ë—Ç–æ–≤
    if (window.location.pathname === '/admin/reports') {
        const reportType = document.getElementById('reportType');
        const generateReportBtn = document.getElementById('generateReportBtn');
        const exportReportBtn = document.getElementById('exportReportBtn');

        if (generateReportBtn) {
            generateReportBtn.addEventListener('click', () => {
                const type = reportType ? reportType.value : 'sales';
                ReportsUI.generateReport(type);
            });
        }

        if (exportReportBtn) {
            exportReportBtn.addEventListener('click', () => {
                const type = reportType ? reportType.value : 'sales';
                ReportsUI.exportReport(type);
            });
        }

        // –°–º–µ–Ω–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        if (reportType) {
            reportType.addEventListener('change', (e) => {
                const selectedType = e.target.value;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
                document.querySelectorAll('.report-filters').forEach(form => {
                    form.style.display = 'none';
                });

                const selectedForm = document.getElementById(`${selectedType}ReportForm`);
                if (selectedForm) {
                    selectedForm.style.display = 'block';
                }
            });
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userInfoContainer = document.getElementById('userInfo');
    if (userInfoContainer) {
        Auth.getCurrentUser().then(user => {
            if (user) {
                userInfoContainer.innerHTML = `
                    <div class="user-info">
                        <span class="user-name">${user.full_name}</span>
                        <span class="user-role">${user.position}</span>
                    </div>
                `;
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
const WarehouseUI = {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–∫–ª–∞–¥—ã
    async loadWarehouses() {
        console.log('Loading warehouses...');
        try {
            const response = await Admin.getWarehouses();
            console.log('Warehouses response:', response);
            if (response && response.data) {
                WarehouseUI.displayWarehouses(response.data);
            } else {
                console.error('No data in response:', response);
                document.getElementById('warehousesContainer').innerHTML = 
                    '<div class="error-state">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö</div>';
            }
        } catch (error) {
            console.error('Error loading warehouses:', error);
            document.getElementById('warehousesContainer').innerHTML = 
                '<div class="error-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–æ–≤: ' + error.message + '</div>';
        }
    },

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    displayWarehouses(warehouses) {
        console.log('Displaying warehouses:', warehouses);
        const container = document.getElementById('warehousesContainer');
        if (!container) {
            console.error('Warehouses container not found!');
            return;
        }

        if (!warehouses || warehouses.length === 0) {
            console.log('No warehouses found');
            container.innerHTML = '<div class="empty-state">–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        const warehousesHTML = warehouses.map(warehouse => `
            <div class="warehouse-card">
                <div class="warehouse-header">
                    <h3>${warehouse.warehouse_name}</h3>
                    <div class="warehouse-actions">
                        <button class="btn btn-sm btn-primary" onclick="editWarehouse(${warehouse.warehouse_id})">
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteWarehouse(${warehouse.warehouse_id})">
                            –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
                <div class="warehouse-info">
                    <div class="info-item">
                        <span class="label">–ì–æ—Ä–æ–¥:</span>
                        <span class="value">${warehouse.city}</span>
                    </div>
                    <div class="info-item">
                        <span class="label">–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</span>
                        <span class="value">${warehouse.capacity} –µ–¥–∏–Ω–∏—Ü</span>
                    </div>
                    <div class="info-item">
                        <span class="label">–¢–µ—Ö–Ω–∏–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏:</span>
                        <span class="value">${warehouse.vehicles_in_stock || 0}</span>
                    </div>
                    <div class="info-item">
                        <span class="label">–°—Ç–∞—Ç—É—Å:</span>
                        <span class="value ${warehouse.is_active ? 'active' : 'inactive'}">
                            ${warehouse.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </span>
                    </div>
                </div>
            </div>
        `).join('');

        container.innerHTML = warehousesHTML;
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
window.editWarehouse = function(id) {
    console.log('Edit warehouse:', id);
    // TODO: Implement edit functionality
};

window.deleteWarehouse = function(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥?')) {
        Admin.deleteWarehouse(id).then(() => {
            WarehouseUI.loadWarehouses();
        }).catch(error => {
            console.error('Error deleting warehouse:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞');
        });
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–ª–∞–¥–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, checking for warehouses container...');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∫–ª–∞–¥–æ–≤
    const container = document.getElementById('warehousesContainer');
    if (container) {
        console.log('Warehouses container found, loading warehouses...');
        WarehouseUI.loadWarehouses();
    } else {
        console.log('Warehouses container not found');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.Admin = Admin;
window.AdminUI = AdminUI;
window.WarehouseUI = WarehouseUI;
window.Sidebar = Sidebar;